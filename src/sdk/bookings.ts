/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  bookingsCreateJson,
  CreateJsonAcceptEnum,
} from "../funcs/bookingsCreateJson.js";
import {
  bookingsCreateRaw,
  CreateRawAcceptEnum,
} from "../funcs/bookingsCreateRaw.js";
import { bookingsDelete } from "../funcs/bookingsDelete.js";
import { bookingsGet, GetAcceptEnum } from "../funcs/bookingsGet.js";
import { bookingsList, ListAcceptEnum } from "../funcs/bookingsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Payments } from "./payments.js";

export { ListAcceptEnum } from "../funcs/bookingsList.js";

export { CreateJsonAcceptEnum } from "../funcs/bookingsCreateJson.js";

export { CreateRawAcceptEnum } from "../funcs/bookingsCreateRaw.js";

export { GetAcceptEnum } from "../funcs/bookingsGet.js";

export class Bookings extends ClientSDK {
  private _payments?: Payments;
  get payments(): Payments {
    return (this._payments ??= new Payments(this._options));
  }

  /**
   * List existing bookings
   *
   * @remarks
   * Returns a list of all trip bookings by the authenticated user.
   */
  async list(
    request: operations.GetBookingsRequest,
    options?: RequestOptions & { acceptHeaderOverride?: ListAcceptEnum },
  ): Promise<operations.GetBookingsResponse> {
    return unwrapAsync(bookingsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a booking
   *
   * @remarks
   * A booking is a temporary hold on a trip. It is not confirmed until the payment is processed.
   */
  async createJson(
    request: components.BookingInput,
    options?: RequestOptions & { acceptHeaderOverride?: CreateJsonAcceptEnum },
  ): Promise<operations.CreateBookingJsonResponse> {
    return unwrapAsync(bookingsCreateJson(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a booking
   *
   * @remarks
   * A booking is a temporary hold on a trip. It is not confirmed until the payment is processed.
   */
  async createRaw(
    request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array,
    options?: RequestOptions & { acceptHeaderOverride?: CreateRawAcceptEnum },
  ): Promise<operations.CreateBookingRawResponse> {
    return unwrapAsync(bookingsCreateRaw(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a booking
   *
   * @remarks
   * Returns the details of a specific booking.
   */
  async get(
    request: operations.GetBookingRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetAcceptEnum },
  ): Promise<operations.GetBookingResponse> {
    return unwrapAsync(bookingsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a booking
   *
   * @remarks
   * Deletes a booking, cancelling the hold on the trip.
   */
  async delete(
    request: operations.DeleteBookingRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteBookingResponse | undefined> {
    return unwrapAsync(bookingsDelete(
      this,
      request,
      options,
    ));
  }
}
