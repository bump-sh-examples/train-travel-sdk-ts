/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Booking successful
 */
export type CreateBookingRawBookingsResponseBody = {
  /**
   * Unique identifier for the booking
   */
  id?: string | undefined;
  /**
   * Identifier of the booked trip
   */
  tripId?: string | undefined;
  /**
   * Name of the passenger
   */
  passengerName?: string | undefined;
  /**
   * Indicates whether the passenger has a bicycle.
   */
  hasBicycle?: boolean | undefined;
  /**
   * Indicates whether the passenger has a dog.
   */
  hasDog?: boolean | undefined;
  links?: components.LinksSelf | undefined;
};

/**
 * Booking successful
 */
export type CreateBookingRawResponseBody = {
  /**
   * Unique identifier for the booking
   */
  id?: string | undefined;
  /**
   * Identifier of the booked trip
   */
  tripId?: string | undefined;
  /**
   * Name of the passenger
   */
  passengerName?: string | undefined;
  /**
   * Indicates whether the passenger has a bicycle.
   */
  hasBicycle?: boolean | undefined;
  /**
   * Indicates whether the passenger has a dog.
   */
  hasDog?: boolean | undefined;
  links?: components.LinksSelf | undefined;
};

export type CreateBookingRawResponseResult =
  | CreateBookingRawResponseBody
  | Uint8Array
  | string;

export type CreateBookingRawResponse = {
  headers: { [k: string]: Array<string> };
  result: CreateBookingRawResponseBody | Uint8Array | string;
};

/** @internal */
export const CreateBookingRawBookingsResponseBody$inboundSchema: z.ZodType<
  CreateBookingRawBookingsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  trip_id: z.string().optional(),
  passenger_name: z.string().optional(),
  has_bicycle: z.boolean().optional(),
  has_dog: z.boolean().optional(),
  links: components.LinksSelf$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "trip_id": "tripId",
    "passenger_name": "passengerName",
    "has_bicycle": "hasBicycle",
    "has_dog": "hasDog",
  });
});

/** @internal */
export type CreateBookingRawBookingsResponseBody$Outbound = {
  id?: string | undefined;
  trip_id?: string | undefined;
  passenger_name?: string | undefined;
  has_bicycle?: boolean | undefined;
  has_dog?: boolean | undefined;
  links?: components.LinksSelf$Outbound | undefined;
};

/** @internal */
export const CreateBookingRawBookingsResponseBody$outboundSchema: z.ZodType<
  CreateBookingRawBookingsResponseBody$Outbound,
  z.ZodTypeDef,
  CreateBookingRawBookingsResponseBody
> = z.object({
  id: z.string().optional(),
  tripId: z.string().optional(),
  passengerName: z.string().optional(),
  hasBicycle: z.boolean().optional(),
  hasDog: z.boolean().optional(),
  links: components.LinksSelf$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    tripId: "trip_id",
    passengerName: "passenger_name",
    hasBicycle: "has_bicycle",
    hasDog: "has_dog",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBookingRawBookingsResponseBody$ {
  /** @deprecated use `CreateBookingRawBookingsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateBookingRawBookingsResponseBody$inboundSchema;
  /** @deprecated use `CreateBookingRawBookingsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateBookingRawBookingsResponseBody$outboundSchema;
  /** @deprecated use `CreateBookingRawBookingsResponseBody$Outbound` instead. */
  export type Outbound = CreateBookingRawBookingsResponseBody$Outbound;
}

export function createBookingRawBookingsResponseBodyToJSON(
  createBookingRawBookingsResponseBody: CreateBookingRawBookingsResponseBody,
): string {
  return JSON.stringify(
    CreateBookingRawBookingsResponseBody$outboundSchema.parse(
      createBookingRawBookingsResponseBody,
    ),
  );
}

export function createBookingRawBookingsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateBookingRawBookingsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateBookingRawBookingsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBookingRawBookingsResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateBookingRawResponseBody$inboundSchema: z.ZodType<
  CreateBookingRawResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  trip_id: z.string().optional(),
  passenger_name: z.string().optional(),
  has_bicycle: z.boolean().optional(),
  has_dog: z.boolean().optional(),
  links: components.LinksSelf$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "trip_id": "tripId",
    "passenger_name": "passengerName",
    "has_bicycle": "hasBicycle",
    "has_dog": "hasDog",
  });
});

/** @internal */
export type CreateBookingRawResponseBody$Outbound = {
  id?: string | undefined;
  trip_id?: string | undefined;
  passenger_name?: string | undefined;
  has_bicycle?: boolean | undefined;
  has_dog?: boolean | undefined;
  links?: components.LinksSelf$Outbound | undefined;
};

/** @internal */
export const CreateBookingRawResponseBody$outboundSchema: z.ZodType<
  CreateBookingRawResponseBody$Outbound,
  z.ZodTypeDef,
  CreateBookingRawResponseBody
> = z.object({
  id: z.string().optional(),
  tripId: z.string().optional(),
  passengerName: z.string().optional(),
  hasBicycle: z.boolean().optional(),
  hasDog: z.boolean().optional(),
  links: components.LinksSelf$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    tripId: "trip_id",
    passengerName: "passenger_name",
    hasBicycle: "has_bicycle",
    hasDog: "has_dog",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBookingRawResponseBody$ {
  /** @deprecated use `CreateBookingRawResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateBookingRawResponseBody$inboundSchema;
  /** @deprecated use `CreateBookingRawResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateBookingRawResponseBody$outboundSchema;
  /** @deprecated use `CreateBookingRawResponseBody$Outbound` instead. */
  export type Outbound = CreateBookingRawResponseBody$Outbound;
}

export function createBookingRawResponseBodyToJSON(
  createBookingRawResponseBody: CreateBookingRawResponseBody,
): string {
  return JSON.stringify(
    CreateBookingRawResponseBody$outboundSchema.parse(
      createBookingRawResponseBody,
    ),
  );
}

export function createBookingRawResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateBookingRawResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBookingRawResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBookingRawResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateBookingRawResponseResult$inboundSchema: z.ZodType<
  CreateBookingRawResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateBookingRawResponseBody$inboundSchema),
  b64$.zodInbound,
]);

/** @internal */
export type CreateBookingRawResponseResult$Outbound =
  | CreateBookingRawResponseBody$Outbound
  | Uint8Array;

/** @internal */
export const CreateBookingRawResponseResult$outboundSchema: z.ZodType<
  CreateBookingRawResponseResult$Outbound,
  z.ZodTypeDef,
  CreateBookingRawResponseResult
> = z.union([
  z.lazy(() => CreateBookingRawResponseBody$outboundSchema),
  b64$.zodOutbound,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBookingRawResponseResult$ {
  /** @deprecated use `CreateBookingRawResponseResult$inboundSchema` instead. */
  export const inboundSchema = CreateBookingRawResponseResult$inboundSchema;
  /** @deprecated use `CreateBookingRawResponseResult$outboundSchema` instead. */
  export const outboundSchema = CreateBookingRawResponseResult$outboundSchema;
  /** @deprecated use `CreateBookingRawResponseResult$Outbound` instead. */
  export type Outbound = CreateBookingRawResponseResult$Outbound;
}

export function createBookingRawResponseResultToJSON(
  createBookingRawResponseResult: CreateBookingRawResponseResult,
): string {
  return JSON.stringify(
    CreateBookingRawResponseResult$outboundSchema.parse(
      createBookingRawResponseResult,
    ),
  );
}

export function createBookingRawResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<CreateBookingRawResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBookingRawResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBookingRawResponseResult' from JSON`,
  );
}

/** @internal */
export const CreateBookingRawResponse$inboundSchema: z.ZodType<
  CreateBookingRawResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    z.lazy(() => CreateBookingRawResponseBody$inboundSchema),
    b64$.zodInbound,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateBookingRawResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: CreateBookingRawResponseBody$Outbound | Uint8Array;
};

/** @internal */
export const CreateBookingRawResponse$outboundSchema: z.ZodType<
  CreateBookingRawResponse$Outbound,
  z.ZodTypeDef,
  CreateBookingRawResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    z.lazy(() => CreateBookingRawResponseBody$outboundSchema),
    b64$.zodOutbound,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBookingRawResponse$ {
  /** @deprecated use `CreateBookingRawResponse$inboundSchema` instead. */
  export const inboundSchema = CreateBookingRawResponse$inboundSchema;
  /** @deprecated use `CreateBookingRawResponse$outboundSchema` instead. */
  export const outboundSchema = CreateBookingRawResponse$outboundSchema;
  /** @deprecated use `CreateBookingRawResponse$Outbound` instead. */
  export type Outbound = CreateBookingRawResponse$Outbound;
}

export function createBookingRawResponseToJSON(
  createBookingRawResponse: CreateBookingRawResponse,
): string {
  return JSON.stringify(
    CreateBookingRawResponse$outboundSchema.parse(createBookingRawResponse),
  );
}

export function createBookingRawResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateBookingRawResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBookingRawResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBookingRawResponse' from JSON`,
  );
}
